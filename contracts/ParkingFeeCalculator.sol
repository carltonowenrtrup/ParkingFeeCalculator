// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {FHE, ebool, euint64, externalEuint64} from "@fhevm/solidity/lib/FHE.sol";
import {SepoliaConfig} from "@fhevm/solidity/config/ZamaConfig.sol";

/**
 * @title ParkingFeeCalculator
 * @notice üÖøÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–∞—Ä–∫–æ–≤–∫–∏ –Ω–∞ FHE:
 *  - –í—Ö–æ–¥: –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã (euint64)
 *  - –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –±–ª–æ–∫–æ–≤ –ø–æ 30 –º–∏–Ω: ceil(minutes / 30) –ë–ï–ó –¥–µ–ª–µ–Ω–∏—è
 *  - –°—Ç–æ–∏–º–æ—Å—Ç—å: blocks * pricePerBlock (–≤ —Ü–µ–Ω—Ç–∞—Ö)
 *  - –î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞: —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (relayer.userDecrypt)
 */
contract ParkingFeeCalculator is SepoliaConfig {
    /* ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≤–ª–∞–¥–µ–ª–µ—Ü ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    uint64 public constant BLOCK_MINUTES = 30;
    address public owner;

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    constructor(uint64 pricePerBlock_, uint16 maxBlocks_) {
        require(pricePerBlock_ > 0, "price=0");
        require(maxBlocks_ > 0, "maxBlocks=0");
        owner = msg.sender;
        pricePerBlock = pricePerBlock_;
        maxBlocks = maxBlocks_;
    }

    function transferOwnership(address n) external onlyOwner {
        require(n != address(0), "Zero owner");
        owner = n;
    }

    function version() external pure returns (string memory) {
        return "ParkingFeeCalculator/1.0.3-sepolia";
    }

    /* ‚îÄ‚îÄ‚îÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞—Ä–∏—Ñ–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    /// @notice –¶–µ–Ω–∞ –∑–∞ –æ–¥–∏–Ω 30-–º–∏–Ω—É—Ç–Ω—ã–π –±–ª–æ–∫, –≤ —Ü–µ–Ω—Ç–∞—Ö
    uint64 public pricePerBlock;

    /// @notice –°–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ –º–∞–∫—Å–∏–º—É–º —É—á–∏—Ç—ã–≤–∞–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 96 = 48 —á–∞—Å–æ–≤)
    uint16 public maxBlocks;

    function setPricePerBlock(uint64 newPrice) external onlyOwner {
        require(newPrice > 0, "price=0");
        pricePerBlock = newPrice;
    }

    function setMaxBlocks(uint16 newMax) external onlyOwner {
        require(newMax > 0, "maxBlocks=0");
        maxBlocks = newMax;
    }

    /* ‚îÄ‚îÄ‚îÄ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    mapping(address => euint64) private _lastFee; // –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂ (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ)

    /* ‚îÄ‚îÄ‚îÄ –°–æ–±—ã—Ç–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    event Quoted(address indexed user, bytes32 feeHandle);

    /* ‚îÄ‚îÄ‚îÄ –ü—É–±–ª–∏—á–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã —Ö—ç–Ω–¥–ª–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    function getMyFeeHandle() external view returns (bytes32) {
        return FHE.toBytes32(_lastFee[msg.sender]);
    }

    /* ‚îÄ‚îÄ‚îÄ –í–Ω—É—Ç—Ä. –ø–æ–º–æ—â–Ω–∏–∫: –ø–æ–∑–∏—Ü–∏—è —Å—Ç–∞—Ä—à–µ–≥–æ –±–∏—Ç–∞ —É uint16 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    function _msbPos(uint16 x) internal pure returns (uint8) {
        uint8 p = 0;
        while (x > 1) {
            x >>= 1;
            unchecked {
                ++p;
            }
        }
        return p; // –¥–ª—è x>=1 –≤–µ—Ä–Ω—ë—Ç –ø–æ–∑–∏—Ü–∏—é —Å—Ç–∞—Ä—à–µ–≥–æ –±–∏—Ç–∞ (0-based)
    }

    /* ‚îÄ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

    /**
     * @notice –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞—Ç—ë–∂ –∑–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç,
     *         –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ (userDecrypt).
     * @param minutesExt  –í–Ω–µ—à–Ω–µ–µ euint64 (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã)
     * @param proof       Attestation –æ—Ç Relayer SDK –¥–ª—è minutesExt
     * @return feeHandle  bytes32-—Ö—ç–Ω–¥–ª –Ω–∞ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç —Å—É–º–º—ã
     */
    function quote(externalEuint64 minutesExt, bytes calldata proof) external returns (bytes32 feeHandle) {
        require(proof.length > 0, "Empty proof");

        // 1) –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã
        euint64 rem = FHE.fromExternal(minutesExt, proof);

        // 2) –ë—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Å—á—ë—Ç floor(minutes / 30) –±–µ–∑ div:
        //    –±–∏–Ω–∞—Ä–Ω—ã–º ¬´–≤—ã—á–∏—Ç–∞–Ω–∏–µ–º –∫—Ä—É–ø–Ω—ã–º–∏ –∫—É—Å–∫–∞–º–∏¬ª 30 * 2^k.
        //    –ü–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–º +1, –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ > 0 (ceil).
        euint64 blocks = FHE.asEuint64(0);

        // –≤–æ–∑—å–º—ë–º –º–∞–∫—Å–∏–º—É–º –ø–æ —Å—Ç–∞—Ä—à–µ–º—É –±–∏—Ç—É maxBlocks (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ~16 –∏—Ç–µ—Ä–∞—Ü–∏–π)
        uint8 kMax = _msbPos(maxBlocks); // 0..15 –¥–ª—è maxBlocks<=65535

        // –∏–¥—ë–º k = kMax..0
        for (uint8 ki = kMax + 1; ki > 0; ) {
            unchecked {
                --ki;
            }
            uint8 k = ki;
            // chunk = 30 * (1 << k)
            uint64 chunk = uint64(BLOCK_MINUTES) * (uint64(1) << k);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º rem >= chunk. –í lib –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å gte, –∏—Å–ø–æ–ª—å–∑—É–µ–º gt(rem, chunk-1)
            ebool ge = FHE.gt(rem, FHE.asEuint64(chunk - 1));

            // rem = ge ? (rem - chunk) : rem
            euint64 remMinus = FHE.sub(rem, FHE.asEuint64(chunk));
            rem = FHE.select(ge, remMinus, rem);

            // blocks = ge ? (blocks + (1 << k)) : blocks
            euint64 addBy = FHE.asEuint64(uint64(1) << k);
            euint64 blocksPlus = FHE.add(blocks, addBy);
            blocks = FHE.select(ge, blocksPlus, blocks);
        }

        // ceil: –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ > 0, –¥–æ–±–∞–≤–∏—Ç—å 1 –±–ª–æ–∫
        ebool hasRem = FHE.gt(rem, FHE.asEuint64(0));
        blocks = FHE.select(hasRem, FHE.add(blocks, FHE.asEuint64(1)), blocks);

        // 3) –û–≥—Ä–∞–Ω–∏—á–∏–º –±–ª–æ–∫–∏ —Å–≤–µ—Ä—Ö—É maxBlocks
        ebool tooMany = FHE.gt(blocks, FHE.asEuint64(maxBlocks));
        blocks = FHE.select(tooMany, FHE.asEuint64(maxBlocks), blocks);

        // 4) fee = blocks * pricePerBlock (–≤ —Ü–µ–Ω—Ç–∞—Ö)
        euint64 fee = FHE.mul(blocks, FHE.asEuint64(pricePerBlock));

        // 5) –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂ –∏ –≤—ã–¥–∞—ë–º –ø—Ä–∞–≤–∞:
        _lastFee[msg.sender] = fee;

        // ‚Äî –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: —á—Ç–æ–±—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±—É–¥—É—â–µ–º
        FHE.allowThis(_lastFee[msg.sender]);

        // ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ —Å–¥–µ–ª–∞—Ç—å userDecrypt —á–µ—Ä–µ–∑ Relayer SDK
        FHE.allow(_lastFee[msg.sender], msg.sender);

        // 6) –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö—ç–Ω–¥–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        feeHandle = FHE.toBytes32(_lastFee[msg.sender]);
        emit Quoted(msg.sender, feeHandle);
    }
}
